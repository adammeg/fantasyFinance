pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./gemme.sol";

contract geFarm {

    mapping(address => uint256) public stakingBalance;
    mapping(address => bool) public isStaking;
    mapping(address => uint256) public startTime;
    mapping(address => uint256) public gemBalance;

    string public name = "gemFarm";

    IERC20 public daiToken;
    Gemme public gemToken;

    event Stake(address indexed from, uint256 amount);
    event Unstake(address indexed from, uint256 amount);

        constructor(
        Gemme _gemToken
        ) {
            gemToken = _gemToken;
        }


    function stake(uint256 amount) public {
        require(
            amount > 0 &&
            gemToken.balanceOf(msg.sender) >= amount, 
            "You cannot stake zero tokens");
            
        if(isStaking[msg.sender] == true){
            gemBalance[msg.sender] += toTransfer;
        }

        gemToken.transferFrom(msg.sender, address(this), amount);
        stakingBalance[msg.sender] += amount;
        startTime[msg.sender] = block.timestamp;
        isStaking[msg.sender] = true;
        emit Stake(msg.sender, amount);
    }

    function unstake(uint256 amount) public {
        require(
            isStaking[msg.sender] = true &&
            stakingBalance[msg.sender] >= amount, 
            "Nothing to unstake"
        );
        uint256 balTransfer = amount;
        amount = 0;
        stakingBalance[msg.sender] -= balTransfer;
        gemToken.transfer(msg.sender, balTransfer);
        gemBalance[msg.sender] += stakingBalance;
        if(stakingBalance[msg.sender] == 0){
            isStaking[msg.sender] = false;
        }
        emit Unstake(msg.sender, balTransfer);
    }
}
